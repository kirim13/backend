generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  username       String         @unique
  firstName      String
  lastName       String
  email          String         @unique
  password       String
  passwordMatch  Boolean        @default(false)
  createdAt      DateTime       @default(now())
  appearanceMode AppearanceMode @default(LIGHT)
  pets           Pet[]
  records Record[]
  notifications Notification[] 
  inventory Inventory[]
  finance Finance[]
  weight Weight[]
  userFriends Relationship[] @relation("users")
  friendUserFriends Relationship[] @relation("friends")
  user1 Room[] @relation("user1")
  user2 Room[] @relation("user2")
  fromUserMessages Message[] @relation("fromUser")
  toUserMessages Message[] @relation("toUser")
}

model Pet {
  id             String   @id @default(cuid())
  firstName      String
  lastName       String
  breed          String
  type           PetType
  birthday       String
  gotchaDate     String
  active         Boolean  @default(true)
  primaryOwnerId String?
  primaryOwner   User?     @relation(fields: [primaryOwnerId], references: [id], onDelete: Cascade)
  notifications Notification[]
  registeredNotifications RegisteredNotification[] 
  registeredRecords RegisteredRecord[]
  registeredInventory RegisteredInventory[] 
  registeredFinance RegisteredFinance[]
  registeredWeight RegisteredWeight[]
}

model Notification { 
  id String @id @default(cuid())
  type String
  name String 
  quantity Int 
  unit String 
  notes String?
  photos String?
  dosageQuantity Int?
  dosageUnit String? 
  frequencyQuantity Int?
  frequencyUnit FrequencyUnit? 
  day String[] 
  time String[] 
  endDate String[] 
  repeating String[] 
  createdAt DateTime @default(now())
  imageSrc String?
  completed Boolean @default(false)
  userId String? 
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  petId String? 
  pet Pet? @relation(fields: [petId], references: [id], onDelete: Cascade)
  notificationDetails NotificationDetail[]
}

model NotificationDetail { 
  id String @id @default(cuid())
  dosageQuantity Int?
  dosageUnit String? 
  frequencyQuantity Int
  frequencyUnit FrequencyUnit 
  notificationId String? 
  notification Notification? @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationSchedules NotificationSchedule[]
}

model NotificationSchedule {
  id String @id @default(cuid())
  day String? 
  hour Int
  minute Int
  timeOfDay TimeOfDay
  endDate String? 
  repeating Repeating? 
  createdAt DateTime @default(now())
  notificationDetailId String? 
  notificationDetails NotificationDetail? @relation(fields: [notificationDetailId], references: [id], onDelete: Cascade)
  registeredNotifications RegisteredNotification[] 
} 

model RegisteredNotification {
  id String @id @default(cuid())
  petId String 
  pet Pet @relation(fields: [petId], references: [id], onDelete: Cascade)
  notificationScheduleId String 
  notificationSchedules NotificationSchedule @relation(fields: [notificationScheduleId], references: [id], onDelete: Cascade)
}

model Record {
  id String @id @default(cuid())
  type RecordType? 
  name String
  notes String? 
  photos String? 
  createdAt DateTime @default(now())
  userId String? 
  users User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  registeredRecords RegisteredRecord[] 
}

model RegisteredRecord {
  id String @id @default(cuid())
  petId String 
  pets Pet @relation(fields: [petId], references: [id], onDelete: Cascade)
  recordId String 
  record Record @relation(fields: [recordId], references: [id], onDelete: Cascade)
}

model Item {
  id String @id @default(cuid())
  type InventoryType
  name String 
  inventory Inventory[]
}

model Inventory {
  id String @id @default(cuid())
  quantity Int 
  itemId String 
  items Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  userId String 
  users User @relation(fields: [userId], references: [id], onDelete: Cascade)
  registeredInventory RegisteredInventory[]
}

model RegisteredInventory {
  id String @id @default(cuid())
  inventoryId String 
  inventory Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade) 
  petId String 
  pets Pet @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model Finance {
  id String @id @default(cuid())
  type FinanceType 
  name String 
  amount Int 
  notes String? 
  repeating Repeating?
  createdAt DateTime @default(now())
  userId String 
  users User @relation(fields: [userId], references: [id], onDelete: Cascade)
  registeredFinance RegisteredFinance[]
}

model RegisteredFinance {
  id String @id @default(cuid())
  financeId String 
  finance Finance @relation(fields: [financeId], references: [id], onDelete: Cascade) 
  petId String 
  pets Pet @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model Weight {
  id String @id @default(cuid())
  weight Int
  targetWeight Int? 
  unit String
  notes String?
  createdAt DateTime @default(now())
  userId String 
  users User @relation(fields: [userId], references: [id], onDelete: Cascade)
  registeredWeight RegisteredWeight[]
}

model RegisteredWeight {
  id String @id @default(cuid())
  weightId String 
  weight Weight @relation(fields: [weightId], references: [id], onDelete: Cascade) 
  petId String 
  pets Pet @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model Relationship {
  status RelationshipStatus 
  userId String @unique
  user User @relation("users", fields: [userId], references: [id], onDelete: Cascade)
  friendId String @unique
  friend User @relation("friends", fields: [friendId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@id(name: "relationshipId", [userId, friendId])
}

model Room {
  id String @id @default(cuid())
  name String? 
  user1Id String 
  user1 User @relation("user1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2Id String 
  user2 User @relation("user2", fields: [user2Id], references: [id], onDelete: Cascade)
  messages Message[]
}

model Message {
  id String @id @default(cuid())
  status MessageStatus?
  title String? 
  message String
  photo String? 
  createdAt DateTime @default(now())
  fromUserId String 
  fromUser User @relation("fromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUserId String 
  toUser User @relation("toUser", fields: [toUserId], references: [id], onDelete: Cascade)
  roomId String 
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

enum AppearanceMode {
  LIGHT
  DARK
}

enum PetType {
  CAT
  DOG
}

enum TimeOfDay {
  AM 
  PM
}

enum NotificationType {
  Medicine 
  Food 
  Water
}

enum FrequencyUnit {
  Daily
  Days 
  Weekly 
  Biweekly
  Weeks
  Monthly
  Bimonthly 
  Months
  Quarterly
}

enum Repeating {
  Daily
  Weekly 
  Biweekly
  Monthly
  Quarterly
}

enum RecordType {
  VACCINATION
  VET_VISIT
  CERTIFICATION
}

enum InventoryType { 
  HEADWEAR 
  ACCESSORY
  OUTERWEAR 
}

enum FinanceType {
  FOOD_AND_TREATS
  TOYS_AND_CLOTHING 
  SUPPLIES
  GROOMING
  SITTER
  VET
  DENTAL
  SHORT_TERM_MEDICATION
  LONG_TERM_MEDICATION
  EMERGENCY
  INSURANCE
  MISC
}

enum RelationshipStatus {
  PENDING 
  CONFIRMED 
  BLOCKED_TO
  BLOCKED_FROM
  BLOCKED_BOTH 
}

enum MessageStatus {
  PENDING
  SENT 
  READ
}